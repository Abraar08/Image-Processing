#include<iostream>
#include<opencv2/opencv.hpp>
#include<opencv2/highgui.hpp>
#include<opencv2/core.hpp>
#include<opencv2/imgcodecs.hpp>

using namespace std;
using namespace cv;

int main(int argv, char **argc)
{
	Mat img, padded, complexI, magI;
	int m, n, cx, cy, top, bottom, right, left;
	img = imread("D:\\Books\\Image Processing\\Images\\DIP3E_Original_Images_CH04\\Fig0417(a)(barbara).tif", IMREAD_GRAYSCALE);

	if (!img.data)
	{
		cout << "Image not read!!" << endl;
		getchar();
		return -1;
	}
	
	//for faster computing 
	m = getOptimalDFTSize(img.rows);
	n = getOptimalDFTSize(img.cols);

	//zero padding 
	copyMakeBorder(img, padded, m - img.rows - 1, m - img.rows-1, n - img.cols -1 , n - img.cols-1, BORDER_CONSTANT, 0);

	Mat planes[] = { Mat_<float>(padded), Mat::zeros(padded.rows,padded.cols,CV_32FC1) };
	merge(planes, 2, complexI);
	dft(complexI, complexI);

	split(complexI, planes);
	magnitude(planes[0], planes[1], planes[0]);
	magI = planes[0];
	log(magI, magI);

	magI = magI(Rect(0, 0, magI.cols , magI.rows ));

	cx = magI.cols / 2;
	cy = magI.rows / 2;

	Mat q0(magI, Rect(0, 0, cx, cy));
	Mat q1(magI, Rect(cx, 0, cx, cy));
	Mat q2(magI, Rect(0, cy, cx, cy));
	Mat q3(magI, Rect(cx, cy, cx, cy));

	Mat temp;
	q0.copyTo(temp);
	q3.copyTo(q0);
	temp.copyTo(q3);

	q1.copyTo(temp);
	q2.copyTo(q1);
	temp.copyTo(q2);
	
	normalize(planes[1], planes[0], 0, 1, NORM_MINMAX);
	imshow("DFT", magI);

	waitKey(0);
	return 0;
}

