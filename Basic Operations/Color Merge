#include <opencv2/core/core.hpp> 
#include <opencv2/highgui/highgui.hpp> 
#include <iostream>

using namespace cv;
using namespace std;

int main()
{
	const float pi = 3.14;
	Mat src1, src2, src3, src4, src5;
	src1 = imread("D:\\Projects\\Opencv\\Basic op\\bgr.png", IMREAD_COLOR);
	src2 = Mat::eye(src1.rows, src1.cols, CV_8UC3);
	src3 = Mat::eye(src1.rows, src1.cols, CV_8UC3);
	src4 = Mat::eye(src1.rows, src1.cols, CV_8UC3);

	if (!src1.data)
	{
		cout << "Image not read!";
		getchar();
		return -1;
	}

	for (int i = 0; i < src1.cols; i++) {
		for (int j = 0; j < src1.rows; j++)
		{
			Vec3b color1 = src1.at<Vec3b>(Point(i, j));
			Vec3b color2 = src2.at<Vec3b>(Point(i, j));
			Vec3b color3 = src3.at<Vec3b>(Point(i, j));
			Vec3b color4 = src4.at<Vec3b>(Point(i, j));

			color2.val[0] = color1.val[0]; 
			color2.val[1] = 0;
			color2.val[2] = 0;

			color3.val[0] = 0;            
			color3.val[1] = color1.val[1];
			color3.val[2] = 0;

			color4.val[0] = 0;            
			color4.val[1] = 0;
			color4.val[2] = color1.val[2];

			src2.at<Vec3b>(Point(i, j)) = color2;
			src3.at<Vec3b>(Point(i, j)) = color3;
			src4.at<Vec3b>(Point(i, j)) = color4;
		}
	}
	namedWindow("Original Image", WINDOW_AUTOSIZE);
	imshow("Original Image", src1);

	namedWindow("Red Channel Image", WINDOW_AUTOSIZE);
	imshow("Red Channel Image", src4);
	

	namedWindow("Green Channel Image", WINDOW_AUTOSIZE);
	imshow("Green Channel Image", src3);
	

	namedWindow("Blue Channel Image", WINDOW_AUTOSIZE);
	imshow("Blue Channel Image", src2);

	waitKey(0);
	return 0;
}
