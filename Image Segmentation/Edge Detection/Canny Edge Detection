#include<iostream>
#include<opencv2/opencv.hpp>
#include<opencv2/highgui.hpp>
#include<opencv2/imgproc.hpp>
#include<opencv2/core.hpp>

using namespace std;
using namespace cv;


int main(int *argv, char **argc)
{
	Mat img, img1, kernel, kernel1;
	img = imread("D:\\Books\\Image Processing\\Images\\DIP3E_Original_Images_CH10\\Fig1026(a)(headCT-Vandy).tif", IMREAD_GRAYSCALE);
	int x, y, m, top, bottom, left, right, kr, kc, krr, kcc;
	float s, sum = 0.0;
	cout << "Enter the kernel size :" << endl;
	cin >> m;
	cout << "Enter the sigma value :" << endl;
	cin >> s;

	GaussianBlur(img, img1, Size(m, m), s, BORDER_CONSTANT);

	kernel = (Mat_<float>(3, 3) << -1, -2, -1, 0, 0, 0, 1, 2, 1);
	kernel1 = (Mat_<float>(3, 3) << -1, 0, 1, -2, 0, 2, -1, 0, 1);


	top = kernel.rows - 1; bottom = top;
	left = kernel.cols - 1; right = left;
	copyMakeBorder(img1, img1, top, bottom, left, right, BORDER_CONSTANT, Scalar(0, 0, 0));

	Mat img2 = Mat::zeros(img1.rows, img1.cols, CV_32FC1);
	Mat img3 = Mat::zeros(img1.rows, img1.cols, CV_32FC1);
	Mat edge_mag = Mat::zeros(img1.rows, img1.cols, CV_32FC1);
	Mat edge_dir = Mat::zeros(img1.rows, img1.cols, CV_8UC1);
	Mat outImage = Mat::zeros(img1.rows, img1.cols, CV_8UC1);
	Mat thisAngle = Mat::zeros(edge_mag.size(), CV_32FC1);


	for (x = 0; x < img1.rows - top; x++)
	{
		for (y = 0; y < img1.cols - left; y++)
		{
			for (kr = 0; kr < kernel.rows; kr++)
			{
				krr = kernel.rows - 1 - kr;
				for (kc = 0; kc < kernel.cols; kc++)
				{
					kcc = kernel.cols - 1 - kc;
					img2.at<float>(x + 1, y + 1) += img1.at<uchar>(x + kr, y + kc)*kernel1.at<float>(krr, kcc);
					img3.at<float>(x + 1, y + 1) += img1.at<uchar>(x + kr, y + kc)*kernel.at<float>(krr, kcc);

				}
			}
		}
	}


	for (int x = 0; x < edge_mag.rows; x++)
	{
		for(int y = 0; y < edge_mag.cols; y++)
		{
			edge_mag.at<float>(x,y) = sqrtf(pow(img2.at<float>(x,y), 2) + pow(img3.at<float>(x,y), 2));
			thisAngle.at<float>(x,y) =fastAtan2(img3.at<float>(x,y), img2.at<float>(x,y));
		}
	}

	normalize(edge_mag, edge_mag, 0, 255, NORM_MINMAX);
	edge_mag.convertTo(edge_mag, CV_8UC1);
	

	Mat suppress = Mat(edge_mag.rows, edge_mag.cols, CV_8UC1);
	for (int i = 1; i < edge_mag.rows - 1; i++)
	{
		for (int j = 1; j < edge_mag.cols - 1; j++)
		{
			float Tangent = thisAngle.at<float>(i, j);
			suppress.at<uchar>(i, j) = edge_mag.at<uchar>(i, j);

			//Horizontal Edge
			if (((0 < Tangent) && (Tangent <= 22.5)) || ((157.5 < Tangent) && (Tangent <= 180)) || ((180 < Tangent) && (Tangent <= 202.5)) || ((337.5 < Tangent) && (Tangent <= 360)))
			{
				if ((edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i, j + 1)) || (edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i, j - 1)))
					suppress.at<uchar>(i, j) = 0;
			}
			//45 Degree Edge
			else if (((202.5 < Tangent) && (Tangent <= 247.5)) || ((22.5 < Tangent) && (Tangent <= 67.5)))
			{
				if ((edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i + 1, j + 1)) || (edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i - 1, j - 1)))
				
					suppress.at<uchar>(i, j) = 0;
			}
			//Vertical Edge
			else if (((247.5 < Tangent) && (Tangent <= 292.5)) || ((67.5 < Tangent) && (Tangent <= 112.5)))
			{
				if ((edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i + 1, j)) || (edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i - 1, j)))
				
					suppress.at<uchar>(i, j) = 0;
			}
			//-45 Degree Edge
			else if (((292.5 < Tangent) && (Tangent <= 337.5)) || ((112.5 < Tangent) && (Tangent <= 157.5)))
			{
				if ((edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i - 1, j + 1)) || (edge_mag.at<uchar>(i, j) < edge_mag.at<uchar>(i + 1, j - 1)))
				
					suppress.at<uchar>(i, j) = 0;
			}
		}
	}


	int sum_t = 0;
	for (int i = 0; i < suppress.rows; i++)
	{
		for (int j = 0; j < suppress.cols; j++)
		{
			sum_t += suppress.at<uchar>(i, j);
		}
	}
	double thresh = sum_t / (suppress.rows*suppress.cols);

	for (int i =1; i < suppress.rows-1; i++) {
		for (int j = 1; j < suppress.cols-1; j++) {
			float upperThreshold = thresh * 3;
			float lowerThreshold = thresh * 1.8;

			if (suppress.at<uchar>(i , j ) > upperThreshold) {
				outImage.at<uchar>(i , j ) = 255;
			}
			if (suppress.at<uchar>(i , j ) < lowerThreshold) {
				outImage.at<uchar>(i , j ) = 0;
			}
			if (suppress.at<uchar>(i , j ) < upperThreshold && suppress.at<uchar>(i , j ) > lowerThreshold)
			{
				for (int m = -1; m <= 1; m++)
				{
					for (int n = -1; n <= 1; n++)
					{
						if (outImage.at<uchar>(i + n, j + m) == 255)
						{
							outImage.at<uchar>(i , j ) = 255;
							break;
						}
					}
				}
			}
		}
	}


	img2.convertTo(img2, CV_8UC1);
	img3.convertTo(img3, CV_8UC1);

	imshow("smoothed", img1);
	imshow("Hori", img2);
	imshow("ver", img3);
	imshow("Mag", edge_mag);
	imshow("Suppress", suppress);
	imshow("result", outImage);

	waitKey(0);
	return 0;
}
