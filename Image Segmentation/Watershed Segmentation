#include<iostream>
#include<opencv2/opencv.hpp>
#include<opencv2/core.hpp>
#include<opencv2/imgcodecs.hpp>
#include<opencv2/highgui.hpp>

using namespace std;
using namespace cv;

int main(int *argv, char **argc)
{
	Mat src, thresh1, open, bg, fg1, fg, kernel, unknown, markers;
	src = imread("D:\\Projects\\seg1.png", IMREAD_COLOR);
	//src = imread("D:\\Projects\\wt.png", IMREAD_COLOR);

	imshow("Input", src);

	cvtColor(src, src, COLOR_BGR2GRAY);
	kernel = Mat::ones(3,3,CV_8UC1);

	threshold(src, thresh1, 0, 255, THRESH_BINARY_INV + THRESH_OTSU);

	erode(thresh1, open, kernel, Point(-1, -1), 1, BORDER_CONSTANT);
	dilate(open, open, kernel, Point(-1, -1), 1, BORDER_CONSTANT);
	
	dilate(open, bg, kernel, Point(-1, -1), 3, BORDER_CONSTANT);

	distanceTransform(open, fg1, DIST_L2, 5);
	normalize(fg1, fg1, 1, 0, NORM_INF);


	threshold(fg1, fg, 0.5, 255, THRESH_BINARY);
	fg.convertTo(fg, CV_8U, 1, 0);
	subtract(bg, fg, unknown);

	// get connected components markers
	connectedComponents(fg, markers);

	for (int i = 0; i < markers.rows; i++)
	{
		for (int j = 0; j < markers.cols; j++)
		{
			markers.at<int>(i, j) = markers.at<int>(i, j)+ 1;
			if (unknown.at<uchar>(i, j) == 255)
			{
				markers.at<int>(i, j) = 0;
			}
		}
	}

	cvtColor(src, src, COLOR_GRAY2BGR);
	watershed(src, markers);

	// draw barriers
	for (int i = 0; i < markers.rows; i++) {
		for (int j = 0; j < markers.cols; j++) {
			if (markers.at<int>(i, j) == -1) {
				src.at<Vec3b>(i, j)[0] = 0;
				src.at<Vec3b>(i, j)[1] = 0;
				src.at<Vec3b>(i, j)[2] = 255;
			}
		}
	}

	markers.convertTo(markers, CV_8UC1);

	imshow("Threshold", thresh1);
	imshow("Closing", open);
	imshow("Background", bg);
	imshow("DT", fg1);
	imshow("Foreground", fg);
	imshow("Sub", unknown);
	imshow("markers", markers);
	imshow("Final", src);
	

	waitKey(0);
	return 0;
}
