#include<iostream>
#include<opencv2/opencv.hpp>
#include<opencv2/core.hpp>
#include<opencv2/highgui.hpp>
#include<opencv2/imgcodecs.hpp>

using namespace std;
using namespace cv;

int main(int argc, char** argv)
{
	Mat img, img1, kernel;
	int top, bottom, right, left, m, x, y, kr, kc, krr, kcc;
	int borderType = BORDER_CONSTANT;
	img = imread("D:\\Books\\Image Processing\\Images\\DIP3E_Original_Images_CH03\\Fig0333(a)(test_pattern_blurring_orig).TIF", IMREAD_GRAYSCALE);

	cout << img.type() << endl;
	cout << img.channels()<<endl;
	//img.convertTo(img, CV_8UC3);

	cout << "Enter the size of the kernel:" << " ";
	cin >> m;

	if (m % 2 == 0)
	{
		cout << "Invalid kernel size!" << endl << "Enter a valid kernel size :" << endl;
		waitKey(0);
		getchar();
		return -1;

	}

	else if (m > img.rows || m > img.cols)
	{
		cout << "Invalid kernel size!" << endl << "Enter a valid kernel size :" << endl;
		waitKey(0);
		getchar();
		return -1;
	}

	else
	{
		kernel = Mat::ones(m, m, CV_32FC1);
		for (kr = 0; kr < kernel.rows; kr++)
		{
			for (kc = 0; kc < kernel.cols; kc++)
			{
				kernel.at<float>(kr, kc) = (kernel.at<float>(kr, kc) / (m*m));
			}
		}
	}

	//ZERO-PADDING
	top = kernel.rows - 1; bottom = top;
	left = kernel.cols - 1; right = left;
	copyMakeBorder(img, img1, top, bottom, left, right, BORDER_CONSTANT, Scalar(0, 0, 0));
	Mat img2 = Mat::zeros(img1.rows, img1.cols, CV_32FC1);



	for (x = 0; x < img1.rows - top; x++)
	{
		for (y = 0; y < img1.cols - left; y++)
		{
			for (kr = 0; kr < kernel.rows; kr++)
			{
				krr = kernel.rows - 1 - kr;
				for (kc = 0; kc < kernel.cols; kc++)
				{
					kcc = kernel.cols - 1 - kc;
					img2.at<float>(x + 1, y + 1) += img1.at<uchar>(x + kr, y + kc)*kernel.at<float>(krr, kcc);

				}
			}
		}
	}

	img2.convertTo(img2, CV_8UC1);

	imshow("Input image", img);
	imshow("convolved image", img2);

	waitKey(0);
	getchar();
	return 0;
}
