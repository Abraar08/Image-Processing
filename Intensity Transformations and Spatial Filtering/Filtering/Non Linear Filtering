#include<iostream>
#include<opencv2/opencv.hpp>
#include<opencv2/highgui.hpp>
#include<opencv2/imgcodecs.hpp>
#include<opencv2/core.hpp>

using namespace std;
using namespace cv;

int main(int argv, char ** argc)
{
	Mat img, img1, img2, kernel;
	int top, bottom, left, right, x, y, xx, yy, kx, ky;
	img = imread("D:\\Books\\Image Processing\\Images\\DIP3E_Original_Images_CH03\\Fig0335(a)(ckt_board_saltpep_prob_pt05).tif",IMREAD_GRAYSCALE);
	
	kernel = Mat::zeros(3, 3, CV_8UC1);

	int size = kernel.rows*kernel.cols;
	top = kernel.rows - 1; bottom = top;
	left = kernel.cols - 1; right = left;
	copyMakeBorder(img, img1, top, bottom, left, right, BORDER_CONSTANT, 0);
	
	cout << img1.size() << endl;

	img2 = Mat::zeros(img1.rows, img1.cols, CV_8UC1);
	int *pxl = new int[size];

	for (x = 0; x < img1.rows - top; x++)
	{
		xx = img1.rows - x - ((img1.rows -top) - 2 * x);
		for (y = 0; y < img1.cols - right; y++)
		{
			int counter = 0;
			yy = img1.cols - y - ((img1.cols -right) - 2 * y);
			for (kx = x; kx <= xx; kx++)
			{
				for (ky = y; ky <= yy; ky++)
				{
					pxl[counter] = img1.at<uchar>(kx, ky);
					counter++;
				}
			}
			for (int sz = 0; sz < size; sz++)
			{
				for (int sz1 = sz + 1; sz1 < size; sz1++)
				{
					if (pxl[sz] > pxl[sz1])
					{
						int temp = 0;
						temp = pxl[sz];
						pxl[sz] = pxl[sz1];
						pxl[sz1] = temp;
					}
				}
				
				img2.at<uchar>(x + 1, y + 1) = pxl[((size - 1) / 2) + 1];
			}
		}
	}

	imshow("original", img);
	imshow("Median filtered", img2);

	waitKey(0);
	return 0;

}
